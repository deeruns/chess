Chess notes
the board is 8x8, but you index into it with index 0-7 to avoid out of bounds error
when references the board use -1 to make sure it followed indexing rules 0-7 instead of 1-8, but you can't add the pieces into the collection unless it is in the 1-8 indexing pattern

stalemate
ChessPosition kingLocation = FindKingPiece(teamColor);
        if (!isInCheck(teamColor)){
            // if the king can't make a valid move
            if (validMoves(kingLocation).isEmpty()){
                //if the king is in start position and can't make any moves, we don't want it to also be in stalemate
                if(currentBoard.getPiece(kingLocation).pieceMoves(currentBoard, kingLocation).isEmpty()) {
                    return false;
                }
                else{return true;}
            }
        }
        return false;


isincheckmate
//        BoardCopy(currentBoard);
//        //compare opponent moves to kingmoves and if any match up, then remove that move
        ChessPosition kingLocation = FindKingPiece(teamColor);
        //Collection<ChessMove> kingValidMoves = currentBoard.getPiece(new ChessPosition(kingLocation.getRow(), kingLocation.getColumn())).pieceMoves(currentBoard, kingLocation);
        //Collection<ChessMove> opponentPieceMoves = opponentPieceMoves(teamColor);
        if (!isInCheck(teamColor)){
            //can't be in checkmate if it isn't in check
            return false;
        }
        if(isInCheck(teamColor)) {
            //if the king can't make any valid moves it is in checkmate
            if (validMoves(kingLocation).isEmpty()) {
                return true;
            }
        }
        return false;
//        Iterator<ChessMove> kingMovesIter = kingValidMoves.iterator();
//        while(kingMovesIter.hasNext()){
//            ChessMove kingMove = kingMovesIter.next();
//            ChessPosition kingMoveEnd = kingMove.endPosition;
//
//            for (ChessMove oppMove: opponentPieceMoves){
//                //for(ChessMove kingMove: kingValidMoves){
//                ChessPosition oppMoveEnd = oppMove.endPosition;
//                //ChessPosition kingMoveEnd = kingMove.endPosition;
//
//                if(oppMoveEnd == kingMoveEnd){
//                    kingMovesIter.remove();
//                    break;
//                }
//            }
//        }
//        if (kingValidMoves.isEmpty()){
//            return true;
//        }
//        return false;
        //return kingValidMoves.isEmpty();




        THIS MAKES A MOVE PRINTED (KIND OF)

        public static void highlightPrinter(PrintStream out, ChessGame game, ChessPosition position, ChessPosition currPos, int i, int j){
                ChessBoard board = game.getBoard();
                Collection<ChessMove> validMoves = game.validMoves(position);
                if (board.getPiece(position) != null){
                    if (highlight) {
                        for (ChessMove move : validMoves) {
                            ChessPosition endPos = move.getEndPosition();
                            if (currPos == endPos){
                                if (!color) {
                                    setBackgroundGreen(out);
                                } else {
                                    setBackgroundDarkGreen(out);
                                }
                                printPiece(out, board.getPiece(new ChessPosition(i,j)).getPieceType(), board.getPiece(new ChessPosition(i,j)).getTeamColor());
                            }
                        }
                    }
                    else{
                        printPiece(out, board.getPiece(new ChessPosition(i,j)).getPieceType(), board.getPiece(new ChessPosition(i,j)).getTeamColor());
                    }
                }
                else {
                    printPiece(out, board.getPiece(new ChessPosition(i,j)).getPieceType(), board.getPiece(new ChessPosition(i,j)).getTeamColor());
                }
            }





           MAYBE ADD BACK UNDER MAKE MOVE IN GAMEUI


           private void makeMoveHelper(ChessGame.TeamColor teamColor, ChessGame game, ChessPosition startPos, ChessPosition endPos) throws InvalidMoveException, DataAccessException {
                   ChessMove finalMove;
                   Collection<ChessMove> validMoves = game.validMoves(startPos);
                   for (ChessMove move : validMoves) {
                       ChessPosition validMove = move.getEndPosition();
                       if (validMove.equals(endPos)) {
                           //move can be made

                           if ((board.getPiece(endPos).getPieceType() == ChessPiece.PieceType.PAWN)
                                   && (endPos.getRow() == 1 || endPos.getRow() == 8)) {
                               //promoPiece
                               out.println(promotionMenu());
                               String promoInput = scanner.next();
                               ChessPiece.PieceType realPiece = getPromoPiece(promoInput);
                               finalMove = new ChessMove(startPos, endPos, realPiece);
                           }
                           else{
                               finalMove = new ChessMove(startPos, endPos, null);
                           }
                           game.makeMove(finalMove);
                           ws.makeMove(authToken, gameID, finalMove);

                       }
                       else{
                           out.println("Invalid Move");
                       }
                   }
               }
